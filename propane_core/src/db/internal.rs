//! Not expected to be called directly by most users. Used by code
//! generated by `#[model]`, `query!`, and other macros.

use super::Error::BoundsError;
use crate::query::{BoolExpr, Expr};
use crate::{Result, SqlType, SqlVal};
use std::vec::Vec;

/// Methods available on a database connection. Most users do not need
/// to call these methods directly and will instead use methods on
/// [DataObject][crate::DataObject] or the `query!` macro. This trait is
/// implemented by both database connections and transactions.
pub trait ConnectionMethods {
    fn backend_name(&self) -> &'static str;
    fn execute(&self, sql: &str) -> Result<()>;
    fn query(
        &self,
        table: &'static str,
        columns: &[Column],
        expr: Option<BoolExpr>,
        limit: Option<i32>,
    ) -> Result<RawQueryResult>;
    fn insert_or_replace(
        &self,
        table: &'static str,
        columns: &[Column],
        values: &[SqlVal],
    ) -> Result<()>;
    fn delete(&self, table: &'static str, pkcol: &'static str, pk: SqlVal) -> Result<()> {
        self.delete_where(table, BoolExpr::Eq(pkcol, Expr::Val(pk)))
    }
    fn delete_where(&self, table: &'static str, expr: BoolExpr) -> Result<()>;
    /// Tests if a table exists in the database.
    fn has_table(&self, table: &'static str) -> Result<bool>;
}

/// Represents a database column. Most users do not need to use this
/// directly.
pub struct Column {
    name: &'static str,
    ty: SqlType,
}
impl Column {
    pub const fn new(name: &'static str, ty: SqlType) -> Self {
        Column { name, ty }
    }
    pub fn name(&self) -> &'static str {
        self.name
    }
    pub fn ty(&self) -> SqlType {
        self.ty
    }
}

/// Represents a database row. Most users do not need to use this
/// directly.
pub struct Row {
    vals: Vec<SqlVal>,
}
impl Row {
    pub fn new(vals: Vec<SqlVal>) -> Self {
        Row { vals }
    }
    pub fn len(&self) -> usize {
        self.vals.len()
    }
    pub fn is_empty(&self) -> bool {
        self.vals.is_empty()
    }
    pub fn get<'a>(&'a self, idx: usize) -> Result<&'a SqlVal> {
        self.vals
            .get(idx)
            .ok_or_else(|| BoundsError(format!("{}th column not present in row", idx)))
    }
    pub fn get_int(&self, idx: usize) -> Result<i64> {
        self.get(idx)?.integer()
    }
    pub fn get_bool(&self, idx: usize) -> Result<bool> {
        self.get(idx)?.bool()
    }
    pub fn get_real(&self, idx: usize) -> Result<f64> {
        self.get(idx)?.real()
    }
}
impl IntoIterator for Row {
    type Item = SqlVal;
    type IntoIter = std::vec::IntoIter<SqlVal>;
    fn into_iter(self) -> Self::IntoIter {
        self.vals.into_iter()
    }
}

pub type RawQueryResult = Vec<Row>;

pub type QueryResult<T> = Vec<T>;
